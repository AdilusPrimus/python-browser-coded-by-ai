# Workflow used to package the application using PyInstaller
name: "BuildBrowserApp"

on:
  push:
    branches: ["main"]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: ["main"]
  schedule:
  - cron: '43 6 * * 5'

jobs:
  environment:
    name: Initialize the build container
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read

    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # python-version: ['3.9', '3.10']
        os: [ubuntu-latest]
        python-version: ['3.10']
      fail-fast: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Display Python version
      run: python --version

    # - name: Install pipenv
    #   run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
    # - run: pipenv install

    - name: Setup cache
      id: cache-pypip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-${{ hashFiles('dev-requirements.txt') }}

    - name: Configure Ubuntu build container
      shell: bash
      run: |
        echo "Configuring build container by downloading the required QT5 packages (apt)"
        sudo apt-get update
        sudo apt-get install qtcreator qtbase5-dev qt5-qmake pyqt5-dev-tools qttools5-dev-tools

    # - name: Define Python virtual environment
    #   shell: bash
    #   run: |
    #     echo "Define Python virtual environment"
    #     python3 -m venv .venv
    #     chmod u+x .venv/bin/activate
    #     .venv/bin/activate

    - name: Manage Python dependencies
      if: steps.cache-pypip.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "Download required Python dependencies (pip)"
        python3 -m pip install --upgrade pip
        python3 -m pip install PyQtWebEngine
        python3 -m pip install sip
        python3 -m pip install PyQt5 --config-settings --confirm-license= --verbose
        python3 -m pip install pyinstaller
        python3 -m pip freeze > requirements.txt

    - name: Save cache
      id: cache-pypip-save
      uses: actions/cache/save@v3
      with:
        # path: ~/.local/share/virtualenvs
        path: ~/.cache/pip
        key: ${{ steps.cache-pypip.outputs.key }}

  build:
    name: Build the Browser Application
    needs: environment
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read

    strategy:
      fail-fast: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Restore cached
      id: cache-pypip-restore
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-pip-${{ hashFiles('dev-requirements.txt') }}

    # - name: Check cache hit
    #   if: steps.cache-pypip.outputs.cache-hit != 'true'
    #   run: exit 1

    - name: Provision PyInstaller
      if: steps.cache-pypip-restore.outputs.cache-hit != 'true'
      shell: bash
      run: "echo \"Installing PyInstaller (pip)\"\npython3 -m pip install --upgrade pip\npython3 -m pip install pyinstaller        \n#magic___^_^___line\n"
    - name: Build application
      shell: bash
      run: |
        echo "Package the application with pyinstaller"
        pyinstaller --log-level=DEBUG --clean browser.spec

    - name: Save cache
      id: cache-pypip-save
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/pip
        key: ${{ steps.cache-pypip-restore.outputs.key }}
